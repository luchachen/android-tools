add_library(liblog STATIC
	logging/liblog/log_event_list.cpp
	logging/liblog/log_event_write.cpp
	logging/liblog/logger_name.cpp
	logging/liblog/logger_read.cpp
	logging/liblog/logger_write.cpp
	logging/liblog/properties.cpp
	logging/liblog/logprint.cpp)

target_compile_definitions(liblog PRIVATE
	-DLIBLOG_LOG_TAG=1006 -D_XOPEN_SOURCE=700 -DFAKE_LOG_DEVICE=1)
target_include_directories(liblog PUBLIC
	logging/liblog/include
	core/libcutils/include)

target_link_libraries(liblog PRIVATE libbase)

#core/property_service/property_info_checker/property_info_checker.cpp
set(propertyinfoparser_SOURCES
	core/property_service/libpropertyinfoparser/property_info_parser.cpp)

add_library(propertyinfoparser OBJECT ${propertyinfoparser_SOURCES})
target_compile_definitions(propertyinfoparser PRIVATE -D_GNU_SOURCE)
target_compile_definitions(propertyinfoparser PUBLIC -DPROP_HOST=1 -DALLOW_LOCAL_PROP_OVERRIDE=1)

target_include_directories(propertyinfoparser PUBLIC
	core/property_service/libpropertyinfoparser/include)

#core/property_service/libpropertyinfoserializer/property_info_serializer_test.cpp
#core/property_service/libpropertyinfoserializer/trie_builder_test.cpp
set(propertyinfoserializer_SOURCES
	core/property_service/libpropertyinfoserializer/property_info_serializer.cpp
	core/property_service/libpropertyinfoserializer/trie_serializer.cpp
	core/property_service/libpropertyinfoserializer/trie_builder.cpp
	core/property_service/libpropertyinfoserializer/property_info_file.cpp)

add_library(propertyinfoserializer STATIC ${propertyinfoserializer_SOURCES})
target_compile_definitions(propertyinfoserializer PRIVATE -D_GNU_SOURCE)
target_compile_definitions(propertyinfoserializer PUBLIC -DPROP_HOST=1 -DALLOW_LOCAL_PROP_OVERRIDE=1)

target_include_directories(propertyinfoserializer PUBLIC
	core/property_service/libpropertyinfoserializer/include)

target_link_libraries(propertyinfoserializer PRIVATE libbase systemproperties)

set(systemproperties_SOURCES
	bionic/libc/system_properties/context_node.cpp
	bionic/libc/system_properties/contexts_serialized.cpp
	bionic/libc/system_properties/contexts_split.cpp
	bionic/libc/system_properties/prop_area.cpp
	bionic/libc/system_properties/prop_info.cpp
	bionic/libc/bionic/system_property_set.cpp
	bionic/libc/bionic/system_property_api.cpp
	bionic/libc/system_properties/system_properties.cpp
	bionic/libc/upstream-openbsd/lib/libc/string/strlcpy.c
	sysprop/bionic/libc/async_safe/async_safe_log.cpp)

add_library(systemproperties SHARED ${systemproperties_SOURCES})
target_compile_definitions(systemproperties PRIVATE -D_GNU_SOURCE)
target_compile_definitions(systemproperties PUBLIC -DPROP_HOST=1)
target_include_directories(systemproperties PRIVATE
	sysprop/bionic/libc/
	sysprop/bionic/libc/async_safe/include
	bionic/libc/system_properties/include)

target_include_directories(systemproperties PUBLIC
	sysprop/bionic/libc/include)

target_link_libraries(systemproperties PUBLIC propertyinfoparser)

add_executable(propd
	sysprop/propd/main.cpp
	sysprop/propd/propd.cpp
	sysprop/propd/persistent_properties.cpp
	sysprop/propd/property_service.cpp
	sysprop/propd/property_type.cpp
	sysprop/propd/sigchld_handler.cpp
	sysprop/propd/util.cpp
	)

target_compile_definitions(propd PRIVATE -D_GNU_SOURCE)
target_compile_definitions(propd PUBLIC -DPROP_HOST=1 -DALLOW_LOCAL_PROP_OVERRIDE=1)

target_link_libraries(propd PRIVATE
	libbase
	propertyinfoserializer
	systemproperties)

add_executable(toolbox
	core/toolbox/toolbox.c
	core/toolbox/setprop.cpp
	core/toolbox/getprop.cpp)

target_link_libraries(toolbox
	libbase
	systemproperties)

add_custom_command(
	TARGET toolbox POST_BUILD
	COMMAND ${CMAKE_COMMAND} -E create_symlink toolbox getprop
	COMMAND ${CMAKE_COMMAND} -E create_symlink toolbox setprop
	COMMENT "Creating setprop and getprop symlink to the executable toolbox"
	VERBATIM)

add_custom_command(
	OUTPUT getprop
	COMMAND ${CMAKE_COMMAND} -E create_symlink toolbox getprop
	COMMENT "Creating getprop symlink to the executable"
)

add_custom_command(
	OUTPUT setprop
	COMMAND ${CMAKE_COMMAND} -E create_symlink toolbox setprop
	COMMENT "Creating setprop symlink to the executable"
)

add_custom_target(setprop ALL DEPENDS toolbox)
add_custom_target(getprop ALL DEPENDS toolbox)
